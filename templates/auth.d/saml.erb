<%
  config         = scope['::splunk::authconfig']
  servercert     = scope['::splunk::servercert']
  servercertpass = scope['::splunk::servercertpass']
  certpass       = scope['splunk::certpass']
%>
[authentication]
authType = <%= scope['::splunk::authentication'] %>
authSettings = <%= config['label'] %>

[saml]
entityId = <%= config['fqdn'] %>
fqdn = https://<%= config['fqdn'] %>
<% if config['idpcertpath'] != nil -%>idpCertPath = <%= config['idpcertpath'] %><% else -%>idpCertPath = idpCert.pem<% end %>
idpSLOUrl = <%= config['idpslourl'] %>
idpSSOUrl = <%= config['idpssourl'] %>
<% if config['inboundsignaturealgorithm'] != nil -%>inboundSignatureAlgorithm = <%= config['inboundsignaturealgorithm'] %><% else -%>inboundSignatureAlgorithm = RSA-SHA1;RSA-SHA256<% end %>
issuerId = <%= config['issuerid'] %>
<% if config['redirectport'] != nil -%>redirectPort = <%= config['redirectport'] %><% else -%>redirectPort = 8000<% end %>
<% if config['replicatecertificates'] != nil -%>replicateCertificates = <%= config['replicatecertificates'] %><% else -%>replicateCertificates = true<% end %>
<% if config['signauthnrequest'] != nil -%>signAuthnRequest = <%= config['signauthnrequest'] %><% else -%>signAuthnRequest = true<% end %>
<% if config['signaturealgorithm'] != nil -%>signatureAlgorithm = <%= config['signaturealgorithm'] %><% else -%>signatureAlgorithm = RSA-SHA1<% end %>
<% if config['signedassertion'] != nil -%>signedAssertion = <%= config['signedassertion'] %><% else -%>signedAssertion = true<% end %>
<% if config['slobinding'] != nil -%>sloBinding = <%= config['slobinding'] %><% else -%>sloBinding = HTTP-POST<% end %>
<% if config['ssobinding'] != nil -%>ssoBinding = <%= config['ssobinding'] %><% else -%>ssoBinding = HTTP-POST<% end %>
<% if servercert != nil -%>sslKeysfile = /opt/splunk/etc/auth/<%= servercert %><% end %>
<% if certpass != nil -%>sslKeysfilePassword = <%= certpass %><% elsif servercertpass != nil -%><%= servercertpass %><% else -%><% end %>

[authenticationResponseAttrMap_SAML]
role = <% if config['role'] != nil -%><%= config['role'] %><% else -%>groups<% end %>

[roleMap_<%= config['label'] -%>]
<% for role in config['role_maps'] -%>
<%= role['role'] %> = <% role['groups'].each do |group| %><%= group -%><%= ";" unless group == role['groups'].last %><% end %>
<% end -%><%# end role maps config -%>

[userToRoleMap_SAML]
